#define PI 3.1415926538

// this function converts degrees to radians
float degreeToRadians(float deg) {
    return deg * (PI/180.0);
}
// pass in the UV, and float in degrees
vec2 rotateUV(vec2 uv, float angle) {
    // recenter
    uv -=0.5;
    uv.x*=iResolution.x/iResolution.y;
    float a = atan(uv.y, uv.x);
    a+=degreeToRadians(angle);
    uv = vec2(cos(a),sin(a))*length(uv);
    
    uv.x *= iResolution.y/iResolution.x;
    // recenter
    uv+=.5;
    return uv;
}


// Reflects the top to bottom
vec2 applySymmetry(vec2 uv) {
    //uv.y=-uv.y;
    //uv.x=-uv.x;
    uv.y=abs(uv.y-0.5)+0.5;
    
    // piece wise solution
    //if(uv.y <= 0.5) {
    
    //    uv.y = abs(uv.y-1.0);
    //}
    return uv;
}

// Reflects the top to bottom
vec2 applySymmetryFlipped(vec2 uv) {
    //uv.y=-uv.y;
    //uv.x=-uv.x;
    //if(uv.y >= 0.5) {
    //    uv.y=abs(uv.y-1.0);
    //}
    
    // 1 to 0
    // 0 as 0
    // 0.5 as 0.5
    
    //uv.y = 1.0-(abs(uv.y-0.5)+0.5);
    // basically 1-(applySymmetry()), and then when simplified, makes this
    uv.y = -abs(uv.y-0.5)+0.5;
    return uv;
}

vec2 applyZoom(vec2 uv, float zoom) {
    // subtract to make center the scale pivot
    uv-=0.5;
    uv *= 1.0/zoom;
    //uv+=0.25;
    // correct it
    uv+=0.5;
    
    //uv+=0.25;
    return uv;
}


vec2 cosmicDistortion(vec2 uv, float zoom, float distort) {
    // subtract to make center the scale pivot
    uv-=0.5;
    uv *= 1.0/zoom;
    float l = length(uv);
    vec2 originalUV = uv;
    uv *= smoothstep(.0,distort*(15.0+2.0/iTime),l*(2.0+iTime*1.0));
    if(length(uv-originalUV)<0.5) {
        uv = rotateUV(uv,iTime);
        uv = applyZoom(uv, 1.0/iTime);
    }
    //uv=1.0-uv;
    //uv+=0.25;
    // correct it
    uv+=0.5;
    
    //uv+=0.25;
    return uv;
}

vec2 zoomLinesMotion(vec2 uv, float zoom) {
    uv -= 0.5;
    uv*=1.0/(zoom*length(uv)/iTime);
    float l = length(uv);
    //uv*=smoothstep(.0,0.5,l);
    uv+=0.5;
    return uv;
}


vec2 distortIn(vec2 uv, float zoom, float distort) {
    uv -= 0.5;
    
    // smaller multiplier means more zoom
    // bigger means less zoom, more normal
    uv*=1.0/(zoom);
    float l = length(uv);
    uv*=smoothstep(1.0*iTime*iTime,.0,l*2.0);
    uv+=0.5;
    return uv;
}

// explanation of smoothstep
// smoothstep(x1,x2,x)
// returns the percentage of x along the range of x1 to x2. this percentage is clamped from 0 to 1
// values along edges will be tapered due to the "smooth" step

// more zoomed around the edges, i.e edge distortion
vec2 edgeDistort(vec2 uv, float zoom, float distort) {
    uv -= 0.5;
    
    // smaller multiplier means more zoom
    // bigger means less zoom, more normal(or just tiles)
    uv*=1.0/(zoom);
    float l = length(uv);
 
    // l is smaller in the middle due to the center, but increases from center
    // i.e l is largest on edges
    uv*=smoothstep(1.0,0.0,l*1.0);
    // as x1 increases, the less zoom there is
    // remember if we scale x1, this causes x to be closer to x2, resulting in larger smoothstep value overall
    // this means less zoom overall
    
    // if x2 is increased, it means any x is closer to the x2, resulting in larger smoothstep value, less zoom
    uv+=0.5;
    return uv;
}

// more zoomed in the center, less zoomed outside
vec2 zoomDistort(vec2 uv, float zoom, float distort) {
    uv -= 0.5;
    
    // smaller multiplier means more zoom
    // bigger means less zoom, more normal(or just tiles)
    uv*=1.0/(zoom);
    float l = length(uv);
 
    // l is smaller in the middle due to the center, but increases from center
    // i.e l is largest on edges
    uv*=smoothstep(0.0, 0.2,l*1.0);
    // as x2 increases, the more zoom there is
    // If x2 increases, x will be closer to x1 overall, resulting in smaller smoothstep value
    // smaller smoothstep values overall means more distortion overall

    uv+=0.5;
    return uv;
}

// vital part is the mod function to make things repeat
vec2 applyRepeat(vec2 uv) {
    // larger s means less zoomed
    // smaller s means more zoomed
    float s = 2.;
    
    // c means number of instances essentially
    // the more divisible the more instances
    float c = 0.5;
    uv -= c/2.;
    uv=mod((uv+c/2.)*s,c);
    
    uv+=c/2.;

    
    return uv;

}

vec2 applyRayon(vec2 uv) {
    uv-=.5;
    uv.x*=iResolution.x/iResolution.y;
    float l = length(uv)+1.;
    l  = exp(1.);
    float a = 4.*atan(uv.y,uv.x)/PI;
    uv=mod(abs(vec2(a,1))+.5,1.0);
    return uv;

}

// beauty
vec2 applySpiral(vec2 uv) {
    float linger = 1.0;
    uv-=.5;
    uv.x*=iResolution.x/iResolution.y;
    float l = length(uv)-.1;
    float a = atan(uv.y,uv.x);
    a+=l*(linger*(exp(iTime)/400.));
    uv=vec2(cos(a),sin(a))*length(uv);
    uv+=.5;
    return uv;

}
float time = 0.0;
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord/iResolution.xy;
    //uv = rotateUV(uv, iTime*30.0);
    if(iTime > 2.) { 
        //uv=applyZoom(uv,clamp(sin(1./iTime-0.1)*1.1,1.,1.1));
    }
    uv = applySpiral(uv);
    
    // get the image color
    fragColor = texture(iChannel0, uv);
    if(iTime > 2. && iTime < 10.) {
        fragColor *= clamp(sin(1.9/iTime*6.0-1.2)*1.7,1.,1.7);
    }
    if(iTime > 16.) {
        fragColor = fragColor;
        fragColor *= iTime/13.;
        fragColor += vec4(0.3,0.1,0.,0.);
    }
    
    else if(iTime > 10.23) {
        fragColor = 0.8-fragColor;   
    }
   
   
    
    //fragColor = vec4(uv.y, uv.y, uv.y, 1.0);
    //fragColor = vec4(uv.x, uv.x, uv.x, 1.0);
}

